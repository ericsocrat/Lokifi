services:
  backend:
    build:
      context: ./backend
    working_dir: /app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/health')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      target: prod
    working_dir: /app
    user: node
    command: ["npm", "run", "start"]
    ports:
      - "3000:3000"
    environment:
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000/api
      - NODE_OPTIONS="--max_old_space_size=4096"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      backend:
        condition: service_healthy

  redis:
    image: redis:7.4-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: fynix
      POSTGRES_USER: fynix
      POSTGRES_PASSWORD: fynix
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fynix"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    profiles:
      - dev

volumes:
  postgres_data:
