/**
 * Generated TypeScript types from FastAPI OpenAPI schema
 * DO NOT EDIT MANUALLY - Generated by openapi-typescript
 */

export interface APIResponse {
  success: boolean;
  timestamp: string;
  version: string;
}

export interface ErrorResponse extends APIResponse {
  success: false;
  error: string;
  code: string;
  details?: Record<string, unknown>;
}

export interface Symbol {
  symbol: string;
  name: string;
  base_asset: string;
  quote_asset: string;
  exchange: string;
  type: string;
  active: boolean;
  logo_url?: string;
}

export interface SymbolsResponse extends APIResponse {
  data: Symbol[];
  total: number;
}

export interface OHLCBar {
  timestamp: number;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
}

export interface OHLCResponse extends APIResponse {
  data: OHLCBar[];
  symbol: string;
  timeframe: string;
  from_timestamp?: number;
  to_timestamp?: number;
}

export interface TickerData {
  symbol: string;
  price: number;
  change_24h: number;
  volume_24h: number;
  high_24h: number;
  low_24h: number;
  timestamp: number;
}

export interface TickerResponse extends APIResponse {
  data: TickerData;
}

export interface IndicatorValue {
  timestamp: number;
  value: number;
  metadata?: Record<string, unknown>;
}

export interface IndicatorResponse extends APIResponse {
  data: IndicatorValue[];
  indicator: string;
  parameters: Record<string, unknown>;
}

export interface WSMessage {
  type: string;
  timestamp: number;
}

export interface WSTickerMessage extends WSMessage {
  type: 'ticker';
  data: TickerData;
}

export interface WSOHLCMessage extends WSMessage {
  type: 'ohlc';
  symbol: string;
  timeframe: string;
  data: OHLCBar;
}

export interface WSErrorMessage extends WSMessage {
  type: 'error';
  error: string;
  code: string;
}

export interface OHLCRequest {
  symbol: string;
  timeframe: string;
  from_timestamp?: number;
  to_timestamp?: number;
  limit?: number;
}

export interface SymbolSearchRequest {
  query?: string;
  exchange?: string;
  type?: string;
  active_only?: boolean;
  limit?: number;
  offset?: number;
}

export interface HealthResponse extends APIResponse {
  status: string;
  uptime: number;
  api_version: string;
  dependencies: Record<string, string>;
}

// API Error codes
export const API_ERROR_CODES = {
  INVALID_REQUEST: 'INVALID_REQUEST',
  SYMBOL_NOT_FOUND: 'SYMBOL_NOT_FOUND',
  INVALID_TIMEFRAME: 'INVALID_TIMEFRAME',
  RATE_LIMITED: 'RATE_LIMITED',
  PROVIDER_ERROR: 'PROVIDER_ERROR',
  INTERNAL_ERROR: 'INTERNAL_ERROR',
} as const;

export type APIErrorCode = typeof API_ERROR_CODES[keyof typeof API_ERROR_CODES];