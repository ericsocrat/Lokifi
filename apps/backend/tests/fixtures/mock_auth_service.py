"""
Mock fixtures for auth_service

Auto-generated by Lokifi Mock Generator
Provides comprehensive mocks for external dependencies
"""

from typing import Any, Dict, List, Optional
from unittest.mock import AsyncMock, MagicMock, Mock, patch

import pytest
import pytest_asyncio

# ============================================================================
# DATABASE MOCKS
# ============================================================================


@pytest.fixture
def mock_db_session():
    """Mock database session"""
    session = AsyncMock()
    session.add = Mock()
    session.delete = Mock()
    session.commit = AsyncMock()
    session.rollback = AsyncMock()
    session.refresh = AsyncMock()
    session.close = AsyncMock()
    session.flush = AsyncMock()

    # Query methods
    session.execute = AsyncMock()
    session.scalar = AsyncMock()
    session.scalars = AsyncMock()

    # Context manager support
    session.__aenter__ = AsyncMock(return_value=session)
    session.__aexit__ = AsyncMock()

    return session


@pytest.fixture
def mock_db_query_result():
    """Mock database query result"""
    result = AsyncMock()
    result.scalar = Mock(return_value=None)
    result.scalars = Mock(return_value=Mock(all=Mock(return_value=[])))
    result.fetchone = Mock(return_value=None)
    result.fetchall = Mock(return_value=[])
    result.first = Mock(return_value=None)
    result.all = Mock(return_value=[])
    return result


# ============================================================================
# FASTAPI MOCKS
# ============================================================================


@pytest.fixture
def mock_request():
    """Mock FastAPI Request"""
    request = Mock()
    request.headers = {}
    request.cookies = {}
    request.query_params = {}
    request.path_params = {}
    request.url = Mock(path="/", query="")
    request.client = Mock(host="127.0.0.1", port=8000)
    request.method = "GET"
    return request


@pytest.fixture
def mock_websocket():
    """Mock WebSocket connection"""
    ws = AsyncMock()
    ws.accept = AsyncMock()
    ws.send_text = AsyncMock()
    ws.send_json = AsyncMock()
    ws.receive_text = AsyncMock(return_value="")
    ws.receive_json = AsyncMock(return_value={})
    ws.close = AsyncMock()
    return ws
