#!/usr/bin/env python3
"""
Common test fixtures and utilities

Generated by: Test Coverage Booster
"""

from unittest.mock import AsyncMock, Mock

import pytest
from fastapi.testclient import TestClient

from app.main import app


@pytest.fixture
def client():
    """Test client for API endpoints"""
    return TestClient(app)


@pytest.fixture
def mock_db_session():
    """Mock database session for service tests"""
    session = AsyncMock()
    session.add = Mock()
    session.commit = AsyncMock()
    session.flush = AsyncMock()
    session.refresh = AsyncMock()
    session.rollback = AsyncMock()
    session.close = AsyncMock()
    session.execute = AsyncMock()
    return session


@pytest.fixture
def sample_crypto_data():
    """Sample cryptocurrency data for testing"""
    return {
        "bitcoin": {"price": 50000.0, "change": 5.2, "volume": 1000000},
        "ethereum": {"price": 3000.0, "change": -2.1, "volume": 500000},
    }


@pytest.fixture
def mock_user():
    """Mock user for authentication tests"""
    return {
        "id": 1,
        "email": "test@example.com",
        "username": "testuser",
        "is_active": True,
    }


@pytest.fixture
def auth_headers(mock_user):
    """Authorization headers for authenticated requests"""
    # This would generate actual JWT token in real implementation
    return {"Authorization": "Bearer mock_token"}


@pytest.fixture
def sample_user_register_request():
    """Sample user registration request for testing"""
    from app.schemas.auth import UserRegisterRequest

    return UserRegisterRequest(
        email="newuser@example.com",
        password="SecurePass123!",
        full_name="New Test User",
        username="newuser",
    )


@pytest.fixture
def sample_user_login_request():
    """Sample user login request for testing"""
    from app.schemas.auth import UserLoginRequest

    return UserLoginRequest(email="test@example.com", password="TestPassword123!")
