name: Accessibility Tests

on:
  pull_request:
    branches: [main, dev]
    paths:
      - "frontend/**"
      - ".github/workflows/accessibility.yml"
  workflow_dispatch:

jobs:
  a11y-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps chromium

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Start application
        working-directory: ./frontend
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run accessibility tests
        working-directory: ./frontend
        run: npm run test:a11y
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: a11y-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
            frontend/a11y-report.html
          retention-days: 14

      - name: Parse accessibility violations
        if: always()
        id: parse-violations
        run: |
          if [ -f "frontend/playwright-report/index.html" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with accessibility results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            let comment = '## ‚ôø Accessibility Test Results\n\n';

            const fs = require('fs');

            try {
              // Try to read Playwright report
              if (fs.existsSync('frontend/playwright-report/index.html')) {
                comment += '‚úÖ Accessibility tests completed.\n\n';
                comment += '### WCAG 2.1 AA Compliance\n';
                comment += 'Please check the detailed report in the artifacts.\n\n';
                comment += '### Common Issues to Check:\n';
                comment += '- [ ] All images have alt text\n';
                comment += '- [ ] Color contrast meets standards\n';
                comment += '- [ ] Keyboard navigation works\n';
                comment += '- [ ] Screen reader compatibility\n';
                comment += '- [ ] Form labels are present\n';
                comment += '- [ ] Touch targets are at least 44x44px\n';
              } else {
                comment += '‚ö†Ô∏è Accessibility tests did not produce a report.\n';
              }
            } catch (e) {
              comment += '‚ö†Ô∏è Error parsing accessibility results.\n';
            }

            comment += '\nüìä See artifacts for detailed accessibility report.';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail on critical violations
        if: always()
        run: |
          # This is a placeholder for checking critical violations
          # You can parse the Playwright report and fail if there are critical issues
          echo "Checking for critical accessibility violations..."

          if [ -f "frontend/test-results/test-failed-1.txt" ]; then
            echo "‚ùå Critical accessibility violations found"
            exit 1
          else
            echo "‚úÖ No critical violations detected"
          fi

  lighthouse-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Start application
        working-directory: ./frontend
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:3000
          configPath: "./frontend/lighthouserc.json"
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 14
