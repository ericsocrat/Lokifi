name: Integration CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NEXT_TELEMETRY_DISABLED: 1
  NODE_ENV: production

jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.0"
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          target: prod
          load: true
          tags: fynix-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile
          load: true
          tags: fynix-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create env file
        run: |
          cat > backend/.env << 'EOL'
          FYNIX_JWT_SECRET=test-secret-for-ci
          FYNIX_JWT_TTL_MIN=1440
          FRONTEND_ORIGIN=http://localhost:3000
          REDIS_URL=redis://redis:6379/0
          # API keys use demo values for CI - configure secrets for production
          CMC_KEY=demo-key
          POLYGON_API_KEY=demo-key
          ALPHAVANTAGE_API_KEY=demo-key
          FINNHUB_API_KEY=demo-key
          COINGECKO_API_KEY=demo-key
          NEWSAPI_KEY=demo-key
          MARKETAUX_API_KEY=demo-key
          FMP_KEY=demo-key
          EOL

      - name: Start Services
        run: docker compose up -d

      - name: Wait for Services with Health Checks
        run: |
          echo "Waiting for backend health check..."
          timeout 60 bash -c 'until docker compose ps backend | grep -q "healthy"; do sleep 2; done'
          echo "Backend is healthy!"
          
          echo "Waiting for frontend health check..."
          timeout 60 bash -c 'until docker compose ps frontend | grep -q "healthy"; do sleep 2; done'
          echo "Frontend is healthy!"

      - name: Test Health Endpoints
        run: |
          echo "Testing backend health endpoint..."
          curl -f http://localhost:8000/api/health
          curl -f http://localhost:8000/health
          
          echo "Testing frontend health endpoint..."
          curl -f http://localhost:3000/api/health
          
          echo "Testing main frontend page..."
          curl -f http://localhost:3000/ > /dev/null
          
          echo "All health endpoints working!"

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          npm run typecheck
          npm run test:ci

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== Backend logs ==="
          docker compose logs backend
          echo "=== Frontend logs ==="
          docker compose logs frontend
          echo "=== Redis logs ==="
          docker compose logs redis