name: Security Tests

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  schedule:
    - cron: "0 2 * * 0" # Weekly on Sunday at 2 AM UTC
  workflow_dispatch:

jobs:
  security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: fynix_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run Python dependency security check
        working-directory: ./backend
        run: |
          safety check --json > safety-report.json || true
          cat safety-report.json

      - name: Run Bandit security linter
        working-directory: ./backend
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          cat bandit-report.json

      - name: Start backend server
        working-directory: ./backend
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fynix_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_for_ci
          ENVIRONMENT: test

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run npm audit
        working-directory: ./frontend
        run: |
          npm audit --json > npm-audit.json || true
          cat npm-audit.json

      - name: Run security tests
        working-directory: ./frontend
        run: npm run test:security
        env:
          API_URL: http://localhost:8000

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json
            frontend/npm-audit.json
            frontend/test-results/
          retention-days: 30

      - name: Check for critical vulnerabilities
        run: |
          echo "Checking for critical vulnerabilities..."

          # Check npm audit
          if [ -f frontend/npm-audit.json ]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' frontend/npm-audit.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' frontend/npm-audit.json)

            if [ "$CRITICAL" -gt "0" ] || [ "$HIGH" -gt "5" ]; then
              echo "‚ùå Found $CRITICAL critical and $HIGH high severity vulnerabilities"
              exit 1
            fi
          fi

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## üîí Security Test Results\n\n';

            try {
              const npmAudit = JSON.parse(fs.readFileSync('frontend/npm-audit.json', 'utf8'));
              const vulns = npmAudit.metadata.vulnerabilities;

              comment += `### NPM Dependencies\n`;
              comment += `- Critical: ${vulns.critical || 0}\n`;
              comment += `- High: ${vulns.high || 0}\n`;
              comment += `- Medium: ${vulns.moderate || 0}\n`;
              comment += `- Low: ${vulns.low || 0}\n\n`;
            } catch (e) {
              comment += '‚ö†Ô∏è Could not parse npm audit results\n\n';
            }

            comment += '‚úÖ Security tests completed. Check artifacts for detailed reports.';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          deny-licenses: GPL-3.0, AGPL-3.0
