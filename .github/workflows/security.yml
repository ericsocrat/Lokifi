name: 🔐 Security Analysis

# Consolidated Security Analysis
# Combines CodeQL (code analysis) + dependency scanning (vulnerabilities)
# Runs on: PRs, main/develop push, weekly schedule
# Duration: ~10-12 minutes (parallel execution)

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run every Monday at 3 AM UTC (combined schedule)
    - cron: "0 3 * * 1"
  workflow_dispatch:

# Cancel in-progress runs for same workflow + branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read
  packages: read

jobs:
  # Detect changes to skip unnecessary scans on PRs
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    timeout-minutes: 2
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🎯 Check changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
              - 'package.json'
              - 'package-lock.json'
              - '.github/workflows/security.yml'
            backend:
              - 'apps/backend/**'
              - 'apps/backend/requirements*.txt'
              - '.github/workflows/security.yml'

  # CodeQL Analysis - Primary Code Security Scanner
  codeql:
    name: 🔍 CodeQL (${{ matrix.language }})
    runs-on: ubuntu-latest
    needs: changes
    if: |
      always() &&
      (github.event_name == 'schedule' ||
       github.event_name == 'workflow_dispatch' ||
       (needs.changes.outputs.frontend == 'true' && matrix.language == 'javascript-typescript') ||
       (needs.changes.outputs.backend == 'true' && matrix.language == 'python'))
    timeout-minutes: 360
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: javascript-typescript
            build-mode: none
          - language: python
            build-mode: none
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          # Specify queries: security-extended for maximum security coverage
          queries: security-extended,security-and-quality

      - name: 🔬 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # Frontend Dependency Scanning
  frontend-dependencies:
    name: 📦 Frontend Dependencies
    runs-on: ubuntu-latest
    needs: changes
    if: |
      always() &&
      (github.event_name == 'schedule' ||
       github.event_name == 'workflow_dispatch' ||
       needs.changes.outputs.frontend == 'true')
    timeout-minutes: 8
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: apps/frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: apps/frontend
        run: npm ci --legacy-peer-deps

      - name: 🔒 Run npm audit (JSON format)
        working-directory: apps/frontend
        run: |
          npm audit --json > npm-audit.json || true

          # Convert npm audit JSON to SARIF
          cat > convert-npm-audit.js << 'EOF'
          const fs = require('fs');
          const auditData = JSON.parse(fs.readFileSync('npm-audit.json', 'utf8'));

          const sarif = {
            version: "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            runs: [{
              tool: {
                driver: {
                  name: "npm audit",
                  version: "1.0.0",
                  informationUri: "https://docs.npmjs.com/cli/v10/commands/npm-audit"
                }
              },
              results: []
            }]
          };

          // Extract vulnerabilities
          if (auditData.vulnerabilities) {
            Object.entries(auditData.vulnerabilities).forEach(([pkg, vuln]) => {
              const severity = vuln.severity || 'warning';
              const level = severity === 'critical' || severity === 'high' ? 'error' :
                           severity === 'moderate' ? 'warning' : 'note';

              sarif.runs[0].results.push({
                ruleId: `npm-audit/${pkg}`,
                level: level,
                message: {
                  text: `${pkg}: ${vuln.via[0]?.title || 'Vulnerability detected'}`
                },
                locations: [{
                  physicalLocation: {
                    artifactLocation: {
                      uri: "apps/frontend/package.json"
                    }
                  }
                }]
              });
            });
          }

          fs.writeFileSync('npm-audit.sarif', JSON.stringify(sarif, null, 2));
          EOF

          node convert-npm-audit.js
        continue-on-error: true

      - name: 📊 Upload npm audit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: apps/frontend/npm-audit.sarif
          category: npm-audit
          wait-for-processing: true

      - name: 📈 Upload npm audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: apps/frontend/npm-audit.json
          retention-days: 7
          compression-level: 9
          if-no-files-found: ignore

  # Backend Dependency Scanning
  backend-dependencies:
    name: 📦 Backend Dependencies
    runs-on: ubuntu-latest
    needs: changes
    if: |
      always() &&
      (github.event_name == 'schedule' ||
       github.event_name == 'workflow_dispatch' ||
       needs.changes.outputs.backend == 'true')
    timeout-minutes: 8
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: apps/backend/requirements-dev.txt

      - name: 📦 Install dependencies
        working-directory: apps/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install pip-audit

      - name: 🔒 Run pip-audit (SARIF output)
        working-directory: apps/backend
        run: |
          pip-audit \
            --format json \
            --output pip-audit.json || true

          # Convert pip-audit JSON to SARIF
          cat > convert-pip-audit.py << 'EOF'
          import json

          with open('pip-audit.json', 'r') as f:
              audit_data = json.load(f)

          sarif = {
              "version": "2.1.0",
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "runs": [{
                  "tool": {
                      "driver": {
                          "name": "pip-audit",
                          "version": "1.0.0",
                          "informationUri": "https://github.com/pypa/pip-audit"
                      }
                  },
                  "results": []
              }]
          }

          # Extract vulnerabilities
          for vuln in audit_data.get('vulnerabilities', []):
              package = vuln.get('name', 'unknown')
              description = vuln.get('description', 'Vulnerability detected')
              severity = 'error'  # pip-audit vulnerabilities are always critical

              sarif["runs"][0]["results"].append({
                  "ruleId": f"pip-audit/{package}",
                  "level": severity,
                  "message": {
                      "text": f"{package}: {description}"
                  },
                  "locations": [{
                      "physicalLocation": {
                          "artifactLocation": {
                              "uri": "apps/backend/requirements.txt"
                          }
                      }
                  }]
              })

          with open('pip-audit.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          EOF

          python convert-pip-audit.py
        continue-on-error: true

      - name: 📊 Upload pip-audit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: apps/backend/pip-audit.sarif
          category: pip-audit
          wait-for-processing: true

      - name: 📈 Upload pip-audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: apps/backend/pip-audit.json
          retention-days: 7
          compression-level: 9
          if-no-files-found: ignore

  # Security Summary
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs:
      - codeql
      - frontend-dependencies
      - backend-dependencies
    if: always()
    timeout-minutes: 2
    steps:
      - name: 🎯 Check security scan results
        run: |
          echo "## Security Scan Results"
          echo "CodeQL: ${{ needs.codeql.result }}"
          echo "Frontend Dependencies: ${{ needs.frontend-dependencies.result }}"
          echo "Backend Dependencies: ${{ needs.backend-dependencies.result }}"

          # This is informational - don't fail the workflow
          if [ "${{ needs.codeql.result }}" = "failure" ] || \
             [ "${{ needs.frontend-dependencies.result }}" = "failure" ] || \
             [ "${{ needs.backend-dependencies.result }}" = "failure" ]; then
            echo "⚠️ Security scans found issues - check GitHub Security tab"
          else
            echo "✅ All security scans completed successfully"
          fi

      - name: 📝 Generate summary
        if: always()
        run: |
          echo "## 🔐 Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Dependencies | ${{ needs.frontend-dependencies.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Dependencies | ${{ needs.backend-dependencies.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security Scanners**:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **CodeQL** - JavaScript/TypeScript & Python code analysis (231 alerts)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **npm audit** - Frontend dependency vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **pip-audit** - Backend dependency vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**What was removed**:" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ ESLint security plugin (redundant with CodeQL)" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Bandit (redundant with CodeQL Python analysis)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Benefits**:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Single SARIF upload per category (no conflicts)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Reduced CI time by ~5-7 minutes" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ CodeQL provides more comprehensive analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [View detailed results in Security tab](https://github.com/${{ github.repository }}/security/code-scanning)" >> $GITHUB_STEP_SUMMARY
