#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Pre-commit Hook Integration - Automated quality gates before commits
    
.DESCRIPTION
    Integrates enhanced protection into Git workflow:
    1. Runs quality gates before each commit
    2. Enforces test coverage thresholds  
    3. Blocks commits with security vulnerabilities
    4. Provides fast feedback for common issues
    5. Progressive quality improvement
    
.EXAMPLE
    .\setup-precommit-hooks.ps1
    
.EXAMPLE
    .\setup-precommit-hooks.ps1 -Strict
    
.NOTES
    This sets up Git hooks to run enhanced protection automatically
#>

param(
    [switch]$Strict,        # Strict mode - block on any quality gate failure
    [switch]$UninstallHooks, # Remove existing hooks
    [int]$CoverageThreshold = 15  # Minimum coverage to allow commits
)

$ErrorActionPreference = "Continue"

Write-Host ""
Write-Host "ü™ù PRE-COMMIT HOOKS SETUP" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Gray
Write-Host ""

# Resolve repository root (actual Git root, not the tools folder)
function Get-GitRoot {
    try {
        $gitPath = git rev-parse --show-toplevel 2>$null
        if ($LASTEXITCODE -eq 0 -and $gitPath) { return $gitPath }
    } catch { }

    # Fallback: walk up from current script directory until .git is found
    $dir = (Resolve-Path (Join-Path $PSScriptRoot ".."))
    while ($dir -and (Test-Path $dir)) {
        if (Test-Path (Join-Path $dir ".git")) { return $dir }
        $parent = Split-Path $dir -Parent
        if ($parent -eq $dir) { break }
        $dir = $parent
    }
    return (Resolve-Path (Join-Path $PSScriptRoot "..\.."))
}

$repoRoot = Get-GitRoot
$gitHooksDir = Join-Path $repoRoot ".git/hooks"

# Ensure hooks directory exists
if (-not (Test-Path $gitHooksDir)) {
    New-Item -ItemType Directory -Force -Path $gitHooksDir | Out-Null
}

# ============================================
# UNINSTALL EXISTING HOOKS
# ============================================
if ($UninstallHooks) {
    Write-Host "üóëÔ∏è  Removing existing hooks..." -ForegroundColor Yellow
    
    $hookFiles = @("pre-commit", "pre-push", "commit-msg")
    
    foreach ($hook in $hookFiles) {
        $hookPath = Join-Path $gitHooksDir $hook
        if (Test-Path $hookPath) {
            Remove-Item $hookPath -Force
            Write-Host "   ‚úÖ Removed $hook hook" -ForegroundColor Green
        }
    }
    
    Write-Host ""
    Write-Host "üéâ All hooks removed successfully!" -ForegroundColor Green
    return
}

# ============================================
# CREATE PRE-COMMIT HOOK
# ============================================
Write-Host "üîß Creating pre-commit hook..." -ForegroundColor Yellow

$enforceStrictParam = if ($Strict) { "-EnforceStrict" } else { "" }
$preCommitCoverage = [int]$CoverageThreshold

$preCommitHook = @"
#!/bin/sh
# Enhanced Pre-commit Hook
# Runs quality gates before allowing commits
# Generated by: setup-precommit-hooks.ps1

echo ""
echo "üõ°Ô∏è  Running pre-commit quality gates..."
echo ""

# Check if we're on Windows and use PowerShell
if command -v pwsh >/dev/null 2>&1; then
    SHELL_CMD="pwsh"
elif command -v powershell >/dev/null 2>&1; then
    SHELL_CMD="powershell"
else
    echo "‚ùå PowerShell not found. Please install PowerShell Core or Windows PowerShell."
    exit 1
fi

# Get the repository root
REPO_ROOT=`$(git rev-parse --show-toplevel)`
PROTECTION_SCRIPT="`$REPO_ROOT/tools/ci-cd/enhanced-ci-protection.ps1"
LOKIFI_SCRIPT="`$REPO_ROOT/tools/lokifi.ps1"

# Run enhanced protection with relaxed/strict settings for pre-commit
if [ -f "`$PROTECTION_SCRIPT" ]; then
    echo "üîç Running enhanced protection checks..."
    
    if `$SHELL_CMD -ExecutionPolicy Bypass -File "`$PROTECTION_SCRIPT" -CoverageThreshold $preCommitCoverage $enforceStrictParam; then
        echo ""
        echo "‚úÖ All quality gates passed! Commit allowed."
        echo ""
        exit 0
    else
        echo ""
        echo "‚ùå Quality gates failed!"
        echo ""
        echo "üîß To fix issues:"
        echo "   ‚Ä¢ Run: .\tools\enhanced-ci-protection.ps1 -GenerateReport"
        echo "   ‚Ä¢ Review failed gates and fix issues"
        echo "   ‚Ä¢ Or use: git commit --no-verify (skip hooks - use carefully!)"
        echo ""
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Enhanced protection script not found. Running basic validation..."
    
    # Fallback to basic lokifi validation
    if [ -f "`$LOKIFI_SCRIPT" ]; then
        if `$SHELL_CMD -ExecutionPolicy Bypass -File "`$LOKIFI_SCRIPT" validate -Quick; then
            echo "‚úÖ Basic validation passed!"
            exit 0
        else
            echo "‚ùå Basic validation failed!"
            exit 1
        fi
    else
        echo "‚ö†Ô∏è  No validation scripts found. Allowing commit."
        exit 0
    fi
fi
"@

$preCommitPath = Join-Path $gitHooksDir "pre-commit"
$preCommitHook | Out-File -FilePath $preCommitPath -Encoding UTF8 -NoNewline

# Make hook executable (Windows - no chmod needed, but set for cross-platform)
try {
    if (Get-Command "chmod" -ErrorAction SilentlyContinue) {
        & chmod +x $preCommitPath
    }
} catch {
    # Ignore chmod errors on Windows
}

Write-Host "   ‚úÖ Created pre-commit hook" -ForegroundColor Green

# ============================================
# CREATE PRE-PUSH HOOK
# ============================================
Write-Host "üîß Creating pre-push hook..." -ForegroundColor Yellow

$prePushCoverage = [int]$CoverageThreshold + 5

$prePushHook = @"
#!/bin/sh
# Enhanced Pre-push Hook  
# Runs comprehensive tests before pushing to remote
# Generated by: setup-precommit-hooks.ps1

echo ""
echo "üöÄ Running pre-push comprehensive checks..."
echo ""

# Check for PowerShell
if command -v pwsh >/dev/null 2>&1; then
    SHELL_CMD="pwsh"
elif command -v powershell >/dev/null 2>&1; then
    SHELL_CMD="powershell"
else
    echo "‚ùå PowerShell not found."
    exit 1
fi

REPO_ROOT=`$(git rev-parse --show-toplevel)`
PROTECTION_SCRIPT="`$REPO_ROOT/tools/ci-cd/enhanced-ci-protection.ps1"
LOKIFI_SCRIPT="`$REPO_ROOT/tools/lokifi.ps1"

# Run comprehensive protection checks
if [ -f "`$PROTECTION_SCRIPT" ]; then
    echo "üîç Running comprehensive protection analysis..."
    
    # Use higher coverage threshold for push
    PUSH_COVERAGE=$prePushCoverage
    
    if `$SHELL_CMD -ExecutionPolicy Bypass -File "`$PROTECTION_SCRIPT" -CoverageThreshold `$PUSH_COVERAGE -GenerateReport; then
        echo ""
        echo "‚úÖ All comprehensive checks passed! Push allowed."
        echo ""
        
        # Also run tests if available
        echo "üß™ Running test suite..."
        if [ -f "`$LOKIFI_SCRIPT" ]; then
            if `$SHELL_CMD -ExecutionPolicy Bypass -File "`$LOKIFI_SCRIPT" test -Quick; then
                echo "‚úÖ Tests passed!"
            else
                echo "‚ö†Ô∏è  Some tests failed, but push allowed (check CI results)"
            fi
        fi
        
        exit 0
    else
        echo ""
        echo "‚ùå Comprehensive checks failed!"
        echo ""
        echo "üîß Before pushing:"
        echo "   ‚Ä¢ Fix quality gate failures"
        echo "   ‚Ä¢ Increase test coverage to `$PUSH_COVERAGE%+"
        echo "   ‚Ä¢ Resolve security vulnerabilities"
        echo "   ‚Ä¢ Or use: git push --no-verify (skip hooks - use very carefully!)"
        echo ""
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Enhanced protection not found. Allowing push."
    exit 0
fi
"@

$prePushPath = Join-Path $gitHooksDir "pre-push"
$prePushHook | Out-File -FilePath $prePushPath -Encoding UTF8 -NoNewline

try {
    if (Get-Command "chmod" -ErrorAction SilentlyContinue) {
        & chmod +x $prePushPath
    }
} catch {
    # Ignore chmod errors
}

Write-Host "   ‚úÖ Created pre-push hook" -ForegroundColor Green

# ============================================
# CREATE COMMIT-MSG HOOK
# ============================================
Write-Host "üîß Creating commit-msg hook..." -ForegroundColor Yellow

$commitMsgHook = @"
#!/bin/sh
# Enhanced Commit Message Hook
# Enforces conventional commit format and quality
# Generated by: setup-precommit-hooks.ps1

COMMIT_MSG_FILE=`$1
COMMIT_MSG=`$(cat `$COMMIT_MSG_FILE`)

echo "üìù Validating commit message format..."

# Check for conventional commit format
if echo "`$COMMIT_MSG" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf|build|ci|revert)(\(.+\))?: .{1,50}'; then
    echo "‚úÖ Commit message format is valid"
    
    # Check for minimum description length
    if [ `${#COMMIT_MSG} -lt 10 ]; then
        echo "‚ùå Commit message too short (minimum 10 characters)"
        echo ""
        echo "üìã Good commit message format:"
        echo "   feat: add user authentication system"
        echo "   fix: resolve login form validation issue"
        echo "   docs: update API documentation"
        echo ""
        exit 1
    fi
    
    # Check for prohibited words
    if echo "`$COMMIT_MSG" | grep -qi 'WIP\|TODO\|FIXME\|HACK\|XXX'; then
        echo "‚ö†Ô∏è  Warning: Commit contains work-in-progress markers"
        echo "   Consider completing the work before committing"
        echo ""
        # Don't block, just warn
    fi
    
    exit 0
else
    echo "‚ùå Invalid commit message format!"
    echo ""
    echo "üìã Use conventional commit format:"
    echo "   <type>[optional scope]: <description>"
    echo ""
    echo "   Types: feat, fix, docs, style, refactor, test, chore, perf, build, ci, revert"
    echo ""
    echo "   Examples:"
    echo "   ‚úÖ feat: add crypto price alerts"
    echo "   ‚úÖ fix(auth): resolve JWT token expiration"
    echo "   ‚úÖ docs: update installation instructions"
    echo "   ‚úÖ test: add unit tests for trading logic"
    echo ""
    echo "   Current message: `$COMMIT_MSG"
    echo ""
    exit 1
fi
"@

$commitMsgPath = Join-Path $gitHooksDir "commit-msg"
$commitMsgHook | Out-File -FilePath $commitMsgPath -Encoding UTF8 -NoNewline

try {
    if (Get-Command "chmod" -ErrorAction SilentlyContinue) {
        & chmod +x $commitMsgPath
    }
} catch {
    # Ignore chmod errors
}

Write-Host "   ‚úÖ Created commit-msg hook" -ForegroundColor Green

# ============================================
# CREATE HOOK BYPASS SCRIPT
# ============================================
Write-Host "üîß Creating hook bypass utility..." -ForegroundColor Yellow

$bypassScript = @"
#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Emergency hook bypass utility
    
.DESCRIPTION
    Allows bypassing Git hooks in emergency situations.
    Use very carefully - bypasses all quality gates!
    
.EXAMPLE
    .\bypass-hooks.ps1 -Commit "emergency fix"
    
.EXAMPLE  
    .\bypass-hooks.ps1 -Push
#>

param(
    [string]`$Commit,
    [switch]`$Push,
    [string]`$Message = "Emergency bypass - review needed"
)

Write-Host ""
Write-Host "üö® EMERGENCY HOOK BYPASS" -ForegroundColor Red
Write-Host "=" * 40 -ForegroundColor Yellow
Write-Host ""

if (`$Commit) {
    Write-Host "‚ö†Ô∏è  Bypassing pre-commit hooks..." -ForegroundColor Yellow
    Write-Host "   Reason: `$Message" -ForegroundColor Gray
    Write-Host ""
    
    git commit -m "`$Commit" --no-verify
    
    if (`$LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Emergency commit successful" -ForegroundColor Green
        Write-Host "üîç IMPORTANT: Review this commit ASAP and fix any issues!" -ForegroundColor Red
    } else {
        Write-Host "‚ùå Emergency commit failed" -ForegroundColor Red
    }
}

if (`$Push) {
    Write-Host "‚ö†Ô∏è  Bypassing pre-push hooks..." -ForegroundColor Yellow
    Write-Host "   Reason: `$Message" -ForegroundColor Gray
    Write-Host ""
    
    git push --no-verify
    
    if (`$LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Emergency push successful" -ForegroundColor Green
        Write-Host "üîç IMPORTANT: Monitor CI/CD pipeline for failures!" -ForegroundColor Red
    } else {
        Write-Host "‚ùå Emergency push failed" -ForegroundColor Red
    }
}

if (-not `$Commit -and -not `$Push) {
    Write-Host "üìã Usage Examples:" -ForegroundColor Cyan
    Write-Host "   .\bypass-hooks.ps1 -Commit 'hotfix: critical security patch'" -ForegroundColor Gray
    Write-Host "   .\bypass-hooks.ps1 -Push -Message 'production emergency'" -ForegroundColor Gray
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Only use in genuine emergencies!" -ForegroundColor Yellow
}

Write-Host ""
"@

$bypassPath = Join-Path $PSScriptRoot "bypass-hooks.ps1"
$bypassScript | Out-File -FilePath $bypassPath -Encoding UTF8

Write-Host "   ‚úÖ Created bypass utility: bypass-hooks.ps1" -ForegroundColor Green

# ============================================
# TEST HOOKS
# ============================================
Write-Host ""
Write-Host "üß™ Testing hook installation..." -ForegroundColor Yellow

$testPassed = 0
$totalTests = 3

# Test pre-commit hook
if (Test-Path $preCommitPath) {
    Write-Host "   ‚úÖ pre-commit hook installed" -ForegroundColor Green
    $testPassed++
} else {
    Write-Host "   ‚ùå pre-commit hook missing" -ForegroundColor Red
}

# Test pre-push hook  
if (Test-Path $prePushPath) {
    Write-Host "   ‚úÖ pre-push hook installed" -ForegroundColor Green
    $testPassed++
} else {
    Write-Host "   ‚ùå pre-push hook missing" -ForegroundColor Red
}

# Test commit-msg hook
if (Test-Path $commitMsgPath) {
    Write-Host "   ‚úÖ commit-msg hook installed" -ForegroundColor Green
    $testPassed++
} else {
    Write-Host "   ‚ùå commit-msg hook missing" -ForegroundColor Red
}

# ============================================
# SUMMARY
# ============================================
Write-Host ""
Write-Host "=" * 50 -ForegroundColor Gray
Write-Host ""
Write-Host "üéØ HOOK SETUP SUMMARY" -ForegroundColor Cyan
Write-Host ""

Write-Host "   üìä Installation: $testPassed/$totalTests hooks installed" -ForegroundColor $(if ($testPassed -eq $totalTests) { "Green" } else { "Red" })
Write-Host "   üîí Mode: $(if ($Strict) { 'Strict (blocks on any failure)' } else { 'Relaxed (warnings for minor issues)' })" -ForegroundColor $(if ($Strict) { "Red" } else { "Yellow" })
Write-Host "   üìà Coverage Threshold: $CoverageThreshold%" -ForegroundColor Gray
Write-Host ""

Write-Host "ü™ù Installed Hooks:" -ForegroundColor Yellow
Write-Host "   üîç pre-commit: Quality gates before each commit" -ForegroundColor Gray
Write-Host "   üöÄ pre-push: Comprehensive checks before push" -ForegroundColor Gray
Write-Host "   üìù commit-msg: Enforces conventional commit format" -ForegroundColor Gray
Write-Host ""

Write-Host "üéØ What Happens Now:" -ForegroundColor Cyan
Write-Host ""
Write-Host "   Every commit will:" -ForegroundColor White
Write-Host "     ‚Ä¢ Run quality gates (maintainability, security, complexity)" -ForegroundColor Gray
Write-Host "     ‚Ä¢ Check test coverage (minimum $CoverageThreshold%)" -ForegroundColor Gray
Write-Host "     ‚Ä¢ Scan for security vulnerabilities" -ForegroundColor Gray
Write-Host "     ‚Ä¢ Validate commit message format" -ForegroundColor Gray
Write-Host ""
Write-Host "   Every push will:" -ForegroundColor White
Write-Host "     ‚Ä¢ Run comprehensive protection analysis" -ForegroundColor Gray
Write-Host "     ‚Ä¢ Require higher coverage threshold ($($CoverageThreshold + 5)%)" -ForegroundColor Gray
Write-Host "     ‚Ä¢ Execute test suite" -ForegroundColor Gray
Write-Host "     ‚Ä¢ Generate protection report" -ForegroundColor Gray
Write-Host ""

if ($testPassed -eq $totalTests) {
    Write-Host "üéâ All hooks installed successfully!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üîß Test your setup:" -ForegroundColor Cyan
    Write-Host "   1. Make a small change to a file" -ForegroundColor Gray
    Write-Host "   2. Run: git add . && git commit -m 'test: verify hooks working'" -ForegroundColor Gray
    Write-Host "   3. Watch the quality gates run automatically!" -ForegroundColor Gray
    Write-Host ""
    Write-Host "üö® Emergency Commands:" -ForegroundColor Yellow
    Write-Host "   .\tools\bypass-hooks.ps1 -Commit 'emergency: critical fix'  # Skip all hooks" -ForegroundColor Gray
    Write-Host "   git commit --no-verify                                       # Skip pre-commit" -ForegroundColor Gray
    Write-Host "   git push --no-verify                                         # Skip pre-push" -ForegroundColor Gray
} else {
    Write-Host "‚ö†Ô∏è  Some hooks failed to install. Check file permissions." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üìö Documentation:" -ForegroundColor Cyan
Write-Host "   Enhanced Protection: .\enhanced-ci-protection.ps1 --help" -ForegroundColor Gray
Write-Host "   Coverage Boost: .\boost-test-coverage.ps1 --help" -ForegroundColor Gray
Write-Host "   Hook Management: .\setup-precommit-hooks.ps1 -UninstallHooks" -ForegroundColor Gray
Write-Host ""