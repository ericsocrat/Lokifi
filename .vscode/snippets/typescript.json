{
  "React Component (Functional)": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:prop}: ${3:string};",
      "}",
      "",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({ ${2:prop} }) => {",
      "  return (",
      "    <div>",
      "      ${4:// Component content}",
      "    </div>",
      "  );",
      "};",
      ""
    ],
    "description": "Create React functional component"
  },
  "React Component with useState": {
    "prefix": "rfcs",
    "body": [
      "import React, { useState } from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:prop}: ${3:string};",
      "}",
      "",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({ ${2:prop} }) => {",
      "  const [${4:state}, set${4/(.*)/${1:/capitalize}/}] = useState${5:<${6:type}>}(${7:initialValue});",
      "",
      "  return (",
      "    <div>",
      "      ${8:// Component content}",
      "    </div>",
      "  );",
      "};",
      ""
    ],
    "description": "Create React functional component with useState"
  },
  "React useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "  ${1:// Effect code}",
      "",
      "  return () => {",
      "    ${2:// Cleanup}",
      "  };",
      "}, [${3:dependencies}]);",
      ""
    ],
    "description": "Create useEffect hook"
  },
  "API Fetch": {
    "prefix": "api-fetch",
    "body": [
      "const fetch${1:Data} = async () => {",
      "  try {",
      "    const response = await fetch('${2:url}');",
      "    if (!response.ok) {",
      "      throw new Error('Network response was not ok');",
      "    }",
      "    const data = await response.json();",
      "    ${3:// Handle data}",
      "  } catch (error) {",
      "    console.error('Error fetching data:', error);",
      "    ${4:// Handle error}",
      "  }",
      "};",
      ""
    ],
    "description": "Create async API fetch function"
  },
  "Next.js Page": {
    "prefix": "nextpage",
    "body": [
      "import { NextPage } from 'next';",
      "",
      "interface ${1:PageName}Props {",
      "  ${2:prop}: ${3:string};",
      "}",
      "",
      "const ${1:PageName}: NextPage<${1:PageName}Props> = ({ ${2:prop} }) => {",
      "  return (",
      "    <div>",
      "      <h1>${4:Page Title}</h1>",
      "      ${5:// Page content}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:PageName};",
      ""
    ],
    "description": "Create Next.js page"
  },
  "Tailwind Container": {
    "prefix": "tw-container",
    "body": [
      "<div className=\"${1|container,mx-auto,max-w-7xl|} ${2|px-4,px-6,px-8|} ${3|py-4,py-6,py-8,py-12|}\">",
      "  ${4:// Content}",
      "</div>",
      ""
    ],
    "description": "Create Tailwind container"
  },
  "Tailwind Card": {
    "prefix": "tw-card",
    "body": [
      "<div className=\"bg-bg-secondary border border-gray-800 rounded-xl p-${1|4,6,8|} shadow-lg hover:border-gray-700 transition-all\">",
      "  ${2:// Card content}",
      "</div>",
      ""
    ],
    "description": "Create Tailwind card"
  },
  "Tailwind Button": {
    "prefix": "tw-button",
    "body": [
      "<button",
      "  className=\"px-${1|4,6,8|} py-${2|2,3,4|} bg-primary text-white rounded-lg hover:bg-primary-light transition-all\"",
      "  onClick={${3:handleClick}}",
      ">",
      "  ${4:Button Text}",
      "</button>",
      ""
    ],
    "description": "Create Tailwind button"
  },
  "TypeScript Interface": {
    "prefix": "tsi",
    "body": [
      "export interface ${1:InterfaceName} {",
      "  ${2:property}: ${3:string};",
      "  ${4:// Additional properties}",
      "}",
      ""
    ],
    "description": "Create TypeScript interface"
  },
  "TypeScript Type": {
    "prefix": "tst",
    "body": [
      "export type ${1:TypeName} = {",
      "  ${2:property}: ${3:string};",
      "  ${4:// Additional properties}",
      "};",
      ""
    ],
    "description": "Create TypeScript type"
  },
  "Async Function": {
    "prefix": "asyncf",
    "body": [
      "const ${1:functionName} = async (${2:params}): Promise<${3:void}> => {",
      "  try {",
      "    ${4:// Function body}",
      "  } catch (error) {",
      "    console.error('Error in ${1:functionName}:', error);",
      "    throw error;",
      "  }",
      "};",
      ""
    ],
    "description": "Create async function"
  },
  "Console Log": {
    "prefix": "cl",
    "body": ["console.log('${1:label}:', ${2:variable});", ""],
    "description": "Console log with label"
  },
  "Try Catch": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "  ${1:// Code that may throw}",
      "} catch (error) {",
      "  console.error('${2:Error message}:', error);",
      "  ${3:// Error handling}",
      "}",
      ""
    ],
    "description": "Try-catch block"
  },
  "WebSocket Connection": {
    "prefix": "websocket",
    "body": [
      "const ws = new WebSocket('${1:ws://localhost:8000}');",
      "",
      "ws.onopen = () => {",
      "  console.log('WebSocket connected');",
      "  ${2:// On connect}",
      "};",
      "",
      "ws.onmessage = (event) => {",
      "  const data = JSON.parse(event.data);",
      "  ${3:// Handle message}",
      "};",
      "",
      "ws.onerror = (error) => {",
      "  console.error('WebSocket error:', error);",
      "};",
      "",
      "ws.onclose = () => {",
      "  console.log('WebSocket disconnected');",
      "  ${4:// On disconnect}",
      "};",
      ""
    ],
    "description": "Create WebSocket connection"
  }
}
